/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 IronMan.glb
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useInteractionState } from './userInteractionState';

export default function Model(props) {

    const group = useRef()
    const { nodes, materials, animations } = useGLTF('/blueLady.glb')
    const { actions } = useAnimations(animations, group)
    const { userState, updateUserState } = useInteractionState();


    // set actions and pose when user interact
    useEffect(() => {
        console.log(userState);
        console.log("this is action ",actions);
            if (userState === 'idle') {
            actions.Female_Idle.reset().fadeIn(0.5).play();
            return () => { actions.Female_Idle.fadeOut(0.5) };
        }
          if (userState === 'talk') {
            actions.Female_Talk.reset().fadeIn(0.5).play();
            return () => { actions.Female_Talk.fadeOut(0.5) };
        }
        // if (userState === 'interract') {
        //     actions.Female_Talk.reset().fadeIn(0.5).play();
        //     return () => { actions.Female_Talk.fadeOut(0.5) };
        // }
        // if (userState === 'hit') {
        //     actions.HeadHit.reset().fadeIn(0.5).play();
        //     return () => { actions.HeadHit.fadeOut(0.5) };
        // }
        // if (userState === 'talk') {
        //     actions.Female_Talk.reset().fadeIn(0.5).play();
        //     return () => { actions.Female_Talk.fadeOut(0.5) };
        // }
        // if (userState === 'talkPhone') {
        //     actions.Talk1.reset().fadeIn(0.5).play();
        //     return () => { actions.Talk1.fadeOut(0.5) };
        // }
        // if (userState === 'idle') {
        //     actions.Female_idle.reset().fadeIn(0.5).play();
        //     return () => { actions.Female_idle.fadeOut(0.5) };
        // }
        // if (userState === 'look') {
        //     actions.Looking.reset().fadeIn(0.5).play();
        //     return () => { actions.Looking.fadeOut(0.5) };
        // }
        // actions.Female_Talk.fadeIn(0.5).play();
        // setTimeout(() => {
        //     actions.Female_idle.fadeOut(0.5)
        //     actions.Female_idle.reset().fadeIn(0.5).play();
        // }, 3500);
        // return () => { actions.Female_idle.fadeOut(0.5) };
    }, [userState]);

    useEffect(() => {
        console.log(actions)

    }, [])

    // use gltfjsx@6.1.4 to read local files glb then convert into component that are read by react-three-drei
    return (

        <group ref={group}  dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={2.126}>
                    <group
                        name="Facial_&_Body_Animated_Party_F_0001_-_ActorCorefbx"
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={0.01}>
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="Object_4">
                                    <primitive object={nodes._rootJoint} />
                                    <skinnedMesh
                                        name="Object_7"
                                        geometry={nodes.Object_7.geometry}
                                        material={materials.Character}
                                        skeleton={nodes.Object_7.skeleton}
                                        morphTargetDictionary={nodes.Object_7.morphTargetDictionary}
                                        morphTargetInfluences={nodes.Object_7.morphTargetInfluences}
                                    />
                                    <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                                    <group name="blue" rotation={[-Math.PI / 2, 0, 0]} />
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>

    )
}

useGLTF.preload('/blueLady.glb')